import { post, get, del as _del } from "../https/requestConstructor";
import { IncomingMessage } from "http";
import TwizoError from "../twizoError";

/**
 *  TOTP, or Time-Based One-Time Password, can be used with our Twizo Authenticator.
    When you have added an application (website) to the app, every 60 seconds a new token will be generated.
    This token you can use for verification.
 *  To start you first need to create a TOTP for a user.
    When the TOTP is generated by the API you can show a QR code to the user which can be scanned by the Twizo Authenticator.
    When generating a new TOTP, the old one is removed and cannot be used anymore.
 *  A TOTP you have generated for a user will be available on all our API nodes.
    So when you generated a TOTP on one of our Asia nodes, you can verify a TOTP also on one of our Europe nodes.
 */

const url:string = "/v1/totp";

/**
 * You will need to specify in JSON format the identifier and issuer you want to create a TOTP for. The parameters you can set are:
 * @param identifier    This is a mandatory string parameter.
                        The identifier must be a unique identifier of the user, e.g. an email address.
                        The identifier will be visible in the Twizo Authenticator app as the application name.
 * @param issuer        This is a mandatory string parameter.
                        The issuer is the name of the site the user wants to login to.
                        The issuer will be visible to the user when he scans the TOTP with the Twizo Authenticator app and shows for which website the TOTP is.
 */
export const create = (identifier:string, issuer:string): Promise<IncomingMessage> => {
    return new Promise((resolve, reject) => {
        const req = post(url, JSON.stringify({
            "identifier": identifier,
            "issuer": issuer
        })).then(resolve)
        .catch(err => {
            if (err instanceof TwizoError) reject(err);
            else reject(new TwizoError(err.message));
        });
    });
}

/**
 * When the user uses a TOTP token and entered it in your website, the API will verify the token with the TOTP generated for the user.
 * @param identifier    The identifier you used to generate the TOTP for the user. 
 * @param token         The TOTP token entered by the user and you want to verify with the generated TOTP for the user.
 */
export const verify = (identifier:string, token:string): Promise<IncomingMessage> => {
    return new Promise((resolve, reject) => {
        const req = get(`${url}/${identifier}?token=${token}`)
        .then(resolve)
        .catch(err => {
            if (err instanceof TwizoError) reject(err);
            else reject(new TwizoError(err.message));
        });
    });
}

/**
 * Check the status of the TOTP
 * @param identifier    The identifier you used for generating the TOTP for the user.
 */
export const status = (identifier:string): Promise<IncomingMessage> => {
    return new Promise((resolve, reject) => {
        const req = get(`${url}/${identifier}`)
        .then(resolve)
        .catch(err => {
            if (err instanceof TwizoError) reject(err);
            else reject(new TwizoError(err.message));
        });
    });
}

/**
 * You can delete a TOTP of a user.
   The user will then not be able to use the TOTP anymore.
   To delete a TOTP of a user you have to do a DELETE to our API with the ‘identifier’.
   When the API has deleted the TOTP you will get a HTTP status 204 'No content' returned from the API. 
 * @param identifier    The identifier you used for generating the TOTP for the user.
 */
export const del = (identifier:string): Promise<IncomingMessage> => {
    return new Promise((resolve, reject) => {
        const req = _del(`${url}/${identifier}`)
        .then(resolve)
        .catch(err => {
            if (err instanceof TwizoError) reject(err);
            else reject(new TwizoError(err.message));
        });
    });
}

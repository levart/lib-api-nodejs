import { get, post, put,  del as _del } from "../https/requestConstructor";
import { IncomingMessage } from "http";
import TwizoError from "../twizoError";

/**
 *  If you lose your phone(s) or otherwise can't receive codes via SMS, voice call, or Google Authenticator, you can use backup codes to sign in. With our backup code feature you can generate 10 backup codes for a user.
    When the user loses his phone or can't receive the verification token via SMS or a voice all, he can use a backup code to verify.
 *  To start you first need to create backup codes for a user.
    When the backup codes are generated by the API you can show them to the user and the user can store them in a safe location.
    We advise you not to store the backup codes on your server, only the user should store them.
    Once the backup codes are generated the user can use them when needed.
    The backup codes will be stored on our servers.
    Each time the user uses a backup code, the number of remaining backup codes left will be returned by the API.
    Inform the user in time when he is almost out of backup codes, as when he is out of backup codes he can't verify anymore.
    To generate new backup codes the user doesn't have to wait until he used the last one, he can generate new backup codes at any time.
    When generating new backup codes the old ones will be removed and cannot be used anymore.
 *  Backup codes you have generated for a user will be available on all our API nodes.
    So when you generated backup codes on one of our Asia nodes, you can verify a backup code also on one of our Europe nodes.
 */

const url:string = "/v1/backupcode";

/**
 * Create the backup codes
 * @param identifier    This is a mandatory string parameter.
                        The identifier must be a unique identifier of the user, e.g. an email address.
 */
export const create = (identifier:string): Promise<IncomingMessage> => {
    return new Promise((resolve, reject) => {        
        const req = post(url, JSON.stringify({
            "identifier": identifier
        })).then(resolve)
        .catch(err => {
            if (err instanceof TwizoError) reject(err);
            else reject(new TwizoError(err.message));
        });
    });
}

/**
 * When the user uses a backup code and entered it in your website, the API will verify the backup code with the backup codes generated for the user.
 * @param identifier    The identifier you used to generate the backup codes for the user.
 * @param backupCode    The backup code entered by the user and you want to verify with the generated backup codes for the user.
 */
export const verify = (identifier:string, backupCode:string): Promise<IncomingMessage> => {
    return new Promise((resolve, reject) => {
        const req = get(`${url}/${identifier}?token=${backupCode}`)
        .then(resolve)
        .catch(err => {
            if (err instanceof TwizoError) reject(err);
            else reject(new TwizoError(err.message));
        });
    });
}

/**
 * Check how many baackup codes a user has left
 * @param identifier    The identifier you used for generating the backup codes for the user.
 */
export const check = (identifier:string): Promise<IncomingMessage> => {
    return new Promise((resolve, reject) => {
        const req = get(`${url}/${identifier}`)
        .then(resolve)
        .catch(err => {
            if (err instanceof TwizoError) reject(err);
            else reject(new TwizoError(err.message));
        });
    });
}

/**
 * When you have generated backup codes for a user before, you can update the backup codes.
   When you update the backup codes of a user, new backup codes will be generated and the old remaining backup codes will be invalid.
 * @param identifier    The identifier you used for generating the backup codes for the user.
 */
export const update = (identifier:string): Promise<IncomingMessage> => {
    return new Promise((resolve, reject) => {        
        const req = put(`${url}/${identifier}`, JSON.stringify({
            "identifier": identifier
        })).then(resolve)
        .catch(err => {
            if (err instanceof TwizoError) reject(err);
            else reject(new TwizoError(err.message));
        });
    });
}

/**
 * You can delete the backup codes of a user.
   The user will then not be able to use any of backup codes generated before.
   To delete the backup codes of a user you have to do a DELETE to our API with the ‘identifier’.
 * @param identifier    The identifier you used for generating the backup codes for the user.
 */
export const del = (identifier:string): Promise<IncomingMessage> => {
    return new Promise((resolve, reject) => {
        const req = _del(`${url}/${identifier}`)
        .then(resolve)
        .catch(err => {
            if (err instanceof TwizoError) reject(err);
            else reject(new TwizoError(err.message));
        });
    });
}
